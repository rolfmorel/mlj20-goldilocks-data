:- use_module(library(aleph)).
:- if(current_predicate(use_rendering/1)).
:- use_rendering(prolog).
:- endif.
:- aleph.
:-style_check(-discontiguous).

:- aleph_set(i,6).
:- aleph_set(clauselength,6).
:- aleph_set(nodes,30000).

%% :- modeh(*,f(+list,-element)). % PROBLEM SPECIFIC
:- modeb(*,head(+list,-element)).
:- modeb(*,tail(+list,-list)).
:- modeb(*,geq(+element,+element)).
:- modeb(*,empty(+list)).
:- modeb(*,even(+element)).
:- modeb(*,odd(+element)).
:- modeb(*,one(+element)).
:- modeb(*,zero(-element)).
:- modeb(*,decrement(+element,-element)).
%% :- modeb(*,increment(+element,-element)). % PROBLEM SPECIFIC
%% :- modeb(*,element(+list,-element)). % PROBLEM SPECIFIC
%% :- modeb(*,cons(+element,+list,-list)). % PROBLEM SPECIFIC
:- modeh(*,f(+list,-list)).
:- modeb(*,f(+list,-list)).
:- modeb(*,cons(+element,+list,-list)).

:- determination(f/2,head/2).
:- determination(f/2,tail/2).
:- determination(f/2,geq/2).
:- determination(f/2,empty/1).
:- determination(f/2,even/1).
:- determination(f/2,odd/1).
:- determination(f/2,one/1).
:- determination(f/2,zero/1).
:- determination(f/2,decrement/2).
:- determination(f/2,f/2).
%% :- determination(f/2,increment/2).
%% :- determination(f/2,element/2).
:- determination(f/2,cons/3).
:-begin_bg.
%% SAME AS POPPER
body_pred(head/2).
body_pred(tail/2).
body_pred(geq/2).
body_pred(empty/1).
body_pred(even/1).
body_pred(odd/1).
body_pred(one/1).
body_pred(zero/1).
body_pred(decrement/2).

%% FOR METAGOL
body_pred(P/A):-
    current_predicate(modeb/2),
    modeb(P,A).

%% body_pred(P/A)

is_list([]).
is_list([_|_]).

increment(A,B):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    succ(A,B).

decrement(A,B):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    succ(B,A).

my_length(A,B):-
    (nonvar(A) -> is_list(A); true),
    (nonvar(B) -> \+is_list(B); true),
    length(A,B).

cons(A,B,C):-
    append([A],B,C).
comps([H|T],H,T).

tail([_|T],T).
head([H|_],H).
sum(A,B,C):-
    C is A+B.
empty([]).

element([X|_],X):-!.
element([_|T],X):-
    element(T,X).

empty_in([]).
empty_out([]).

zero(0).
one(1).

gt(A,B):-
    nonvar(A),
    nonvar(B),
    \+is_list(A),
    \+is_list(B),
    A > B.

geq(A,B):-
    nonvar(A),
    nonvar(B),
    \+is_list(A),
    \+is_list(B),
    A >= B.

even(A):-
    nonvar(A),
    \+ is_list(A),
    0 is A mod 2.

odd(A):-
    nonvar(A),
    \+ is_list(A),
    1 is A mod 2.


%% partition(Pivot,L1,Left,Right)


add_count(f(A),N-f(A)):-
    length(A,N).
add_count(f(A,B),N-f(A,B)):-
    length(A,N).
remove_k(_-V,V).

sort_examples(L1,L2):-
  maplist(add_count,L1,L3),
  keysort(L3,L4),
  maplist(remove_k,L4,L2).

run:-
    findall(A, pos(A), Pos0),
    findall(A, neg(A), Neg0),
    sort_examples(Pos0, Pos),
    sort_examples(Neg0, Neg),
    learn(Pos, Neg).



%% run:-
%%     findall(A, pos(A), Pos),
%%     findall(A, neg(A), Neg),
%%     learn(Pos, Neg).

test:-
    forall(pos(A),test_pos(A)),
    forall(neg(A),test_neg(A)),
    halt.

target(P/A):-
    pos(Atom),!,
    functor(Atom,P,A).

target_exists:-
    target(P/A),
    current_predicate(P/A).

test_pos(A):-
    target_exists,
    call(A),!,
    writeln('acc,1').
test_pos(_):-
    writeln('acc,0').

test_neg(A):-
    target_exists,
    call(A),!,
    writeln('acc,0').
test_neg(_):-
    writeln('acc,1').

:-end_bg.
:-begin_in_pos.
f([36, 9, 37, 64, 52, 34, 99, 29, 86, 26, 24, 83, 83, 80, 7, 30, 62, 9, 95, 16, 62, 89, 77, 72, 100, 15, 31, 55, 33, 17, 27, 41, 60, 78, 87, 62, 51, 86, 91, 17, 94, 77, 2, 12, 35, 92, 2, 97, 43],[36, 9, 37, 64, 52, 34, 99, 29, 86, 26, 24, 83, 83, 80, 7, 30, 62, 9, 95, 16, 62, 89, 77, 72, 100, 15, 31, 55, 33, 17, 27, 41, 60, 78, 87, 62, 51, 86, 91, 17, 94, 77, 2, 12, 35, 92, 2, 97]).
f([21, 60, 18, 43, 15, 71, 52, 61, 23, 86, 73, 60, 15, 46, 6, 60, 70, 61, 88, 60, 50, 68, 22, 20, 33, 23, 44, 17, 32, 67, 63, 77, 1, 29, 15, 46, 90, 31, 54, 45, 84, 12, 40, 30],[21, 60, 18, 43, 15, 71, 52, 61, 23, 86, 73, 60, 15, 46, 6, 60, 70, 61, 88, 60, 50, 68, 22, 20, 33, 23, 44, 17, 32, 67, 63, 77, 1, 29, 15, 46, 90, 31, 54, 45, 84, 12, 40]).
f([98, 15, 47, 37, 96, 65, 50, 23, 62, 99, 26, 62, 13, 63, 94, 33, 46, 49, 7, 37, 38, 40, 22, 54, 83, 67, 52, 82, 59, 69, 88, 70, 101, 7],[98, 15, 47, 37, 96, 65, 50, 23, 62, 99, 26, 62, 13, 63, 94, 33, 46, 49, 7, 37, 38, 40, 22, 54, 83, 67, 52, 82, 59, 69, 88, 70, 101]).
f([71, 77, 82, 67, 97, 58, 90, 21, 54, 38, 38, 46, 19, 40, 6, 55, 84, 70, 67, 100, 6, 53, 66, 98, 10, 76, 52, 62, 3, 11],[71, 77, 82, 67, 97, 58, 90, 21, 54, 38, 38, 46, 19, 40, 6, 55, 84, 70, 67, 100, 6, 53, 66, 98, 10, 76, 52, 62, 3]).
f([76, 55, 22, 59, 32, 66, 88, 57, 2, 45, 30, 40, 54, 98, 30, 83, 5, 15, 10, 68, 36, 68, 51, 33, 27, 82, 16, 27, 49, 43, 92, 67, 14, 74, 93, 43, 82, 64, 76, 89, 93, 92, 43, 27, 57, 5, 7, 48, 89, 95],[76, 55, 22, 59, 32, 66, 88, 57, 2, 45, 30, 40, 54, 98, 30, 83, 5, 15, 10, 68, 36, 68, 51, 33, 27, 82, 16, 27, 49, 43, 92, 67, 14, 74, 93, 43, 82, 64, 76, 89, 93, 92, 43, 27, 57, 5, 7, 48, 89]).
f([36, 95, 2, 18, 39, 43, 101, 13, 80, 74, 2, 17, 71, 16, 15, 9, 12, 16, 42, 85, 79, 51, 18, 5, 56, 58, 80, 85, 39, 101, 18, 77, 95, 4, 36, 26, 53, 81, 89, 70, 66],[36, 95, 2, 18, 39, 43, 101, 13, 80, 74, 2, 17, 71, 16, 15, 9, 12, 16, 42, 85, 79, 51, 18, 5, 56, 58, 80, 85, 39, 101, 18, 77, 95, 4, 36, 26, 53, 81, 89, 70]).
f([101, 39, 78, 48, 37, 89, 91, 74, 3, 55, 11, 90, 29, 20, 2, 72, 17, 84, 46, 32, 50, 31, 98, 84, 17],[101, 39, 78, 48, 37, 89, 91, 74, 3, 55, 11, 90, 29, 20, 2, 72, 17, 84, 46, 32, 50, 31, 98, 84]).
f([88, 55, 88, 76, 90, 91, 76, 97, 13, 58, 93],[88, 55, 88, 76, 90, 91, 76, 97, 13, 58]).
f([82, 95, 14, 26, 98, 51, 47, 100, 95],[82, 95, 14, 26, 98, 51, 47, 100]).
f([54, 98, 39, 89, 42, 89, 69, 3, 29, 4, 6, 12, 33, 13, 73, 72, 42, 83, 56, 5, 90, 59, 22, 36, 90, 76, 15, 76, 56, 14, 1, 8, 32, 98, 82, 4, 59, 46, 51, 18, 54, 85, 77, 4, 4],[54, 98, 39, 89, 42, 89, 69, 3, 29, 4, 6, 12, 33, 13, 73, 72, 42, 83, 56, 5, 90, 59, 22, 36, 90, 76, 15, 76, 56, 14, 1, 8, 32, 98, 82, 4, 59, 46, 51, 18, 54, 85, 77, 4]).
:-end_in_pos.
:-begin_in_neg.
f([33, 26, 39, 90, 57, 79, 10, 76, 32, 35, 57, 56, 6, 33, 90, 71, 19, 95, 67, 41, 43, 54, 8, 52, 33, 94, 88],[33, 26, 39, 90, 57, 79, 10, 76, 32, 35, 57, 56, 6, 33, 90, 71, 19, 95, 67, 41, 43, 54, 8, 52, 33, 94, 88]).
f([41, 72, 88, 58, 67, 36, 22, 66, 73, 46, 28, 4, 12, 40, 94, 67, 61, 46, 68, 99, 63, 51, 26, 45, 100, 15],[41, 72, 88, 58, 67, 36, 22, 66, 73, 46, 28, 4, 12, 40, 94, 67, 61, 46, 68, 99, 63, 51, 26, 45, 100, 15]).
f([35, 16, 23, 40, 58, 62, 30, 21, 67, 41, 24, 10, 32, 46, 68],[35, 16, 23, 40, 58, 62, 30, 21, 67, 41, 24, 10, 32, 46, 68]).
f([12, 62, 83, 31, 51, 31, 99, 89, 53, 48, 78],[12, 62, 83, 31, 51, 31, 99, 89, 53, 48, 78]).
f([84, 64, 39, 94, 59, 83, 37, 17, 65, 37, 11, 73, 46, 90, 74, 78, 32, 44, 28, 39, 56, 28, 45, 76, 35, 52, 13, 15, 18, 22, 72, 99, 77, 63, 4, 40, 81, 64, 85, 53, 26, 82],[84, 64, 39, 94, 59, 83, 37, 17, 65, 37, 11, 73, 46, 90, 74, 78, 32, 44, 28, 39, 56, 28, 45, 76, 35, 52, 13, 15, 18, 22, 72, 99, 77, 63, 4, 40, 81, 64, 85, 53, 26, 82]).
f([41, 1, 21, 48, 98, 58, 96, 100, 38, 3, 79, 73, 16, 60, 95, 39, 8, 20, 97, 3, 47, 87, 40, 12, 13, 19, 62, 71, 12, 60, 100, 22, 52, 97, 15, 91, 74, 22, 45, 57, 44, 10, 88, 85, 19, 53, 7, 60],[41, 1, 21, 48, 98, 58, 96, 100, 38, 3, 79, 73, 16, 60, 95, 39, 8, 20, 97, 3, 47, 87, 40, 12, 13, 19, 62, 71, 12, 60, 100, 22, 52, 97, 15, 91, 74, 22, 45, 57, 44, 10, 88, 85, 19, 53, 7, 60]).
f([78, 95, 31, 96, 16, 41, 55, 56, 77, 100, 20, 14, 94, 96, 50, 41, 71, 46, 60, 100, 36, 97, 101, 96, 36, 18, 44, 48, 25, 91, 14, 3, 69, 88, 30, 49, 100],[78, 95, 31, 96, 16, 41, 55, 56, 77, 100, 20, 14, 94, 96, 50, 41, 71, 46, 60, 100, 36, 97, 101, 96, 36, 18, 44, 48, 25, 91, 14, 3, 69, 88, 30, 49, 100]).
f([23, 5, 64, 33, 20, 21, 92, 16, 55, 78, 16, 50, 10, 40, 81, 10, 60, 26, 66],[23, 5, 64, 33, 20, 21, 92, 16, 55, 78, 16, 50, 10, 40, 81, 10, 60, 26, 66]).
f([2, 6, 81, 79, 33, 20, 26, 60, 53, 14, 74, 13, 21, 13, 59, 48, 19, 4, 39],[2, 6, 81, 79, 33, 20, 26, 60, 53, 14, 74, 13, 21, 13, 59, 48, 19, 4, 39]).
f([51, 74, 64, 32, 39, 29, 65, 62, 91, 22, 34],[51, 74, 64, 32, 39, 29, 65, 62, 91, 22, 34]).
:-end_in_neg.
