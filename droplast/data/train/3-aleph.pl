:- use_module(library(aleph)).
:- if(current_predicate(use_rendering/1)).
:- use_rendering(prolog).
:- endif.
:- aleph.
:-style_check(-discontiguous).

:- aleph_set(i,6).
:- aleph_set(clauselength,6).
:- aleph_set(nodes,30000).

%% :- modeh(*,f(+list,-element)). % PROBLEM SPECIFIC
:- modeb(*,head(+list,-element)).
:- modeb(*,tail(+list,-list)).
:- modeb(*,geq(+element,+element)).
:- modeb(*,empty(+list)).
:- modeb(*,even(+element)).
:- modeb(*,odd(+element)).
:- modeb(*,one(+int)).
:- modeb(*,zero(-int)).
:- modeb(*,decrement(+int,-int)).
%% :- modeb(*,increment(+int,-int)). % PROBLEM SPECIFIC
%% :- modeb(*,element(+list,-element)). % PROBLEM SPECIFIC
%% :- modeb(*,cons(+element,+list,-list)). % PROBLEM SPECIFIC
:- modeh(*,f(+list,-list)).
:- modeb(*,f(+list,-list)).
:- modeb(*,cons(+element,+list,-list)).

:- determination(f/2,head/2).
:- determination(f/2,tail/2).
:- determination(f/2,geq/2).
:- determination(f/2,empty/1).
:- determination(f/2,even/1).
:- determination(f/2,odd/1).
:- determination(f/2,one/1).
:- determination(f/2,zero/1).
:- determination(f/2,decrement/2).
:- determination(f/2,f/2).
%% :- determination(f/2,increment/2).
%% :- determination(f/2,element/2).
:- determination(f/2,cons/3).
:-begin_bg.
%% SAME AS POPPER
body_pred(head/2).
body_pred(tail/2).
body_pred(geq/2).
body_pred(empty/1).
body_pred(even/1).
body_pred(odd/1).
body_pred(one/1).
body_pred(zero/1).
body_pred(decrement/2).

%% FOR METAGOL
body_pred(P/A):-
    current_predicate(modeb/2),
    modeb(P,A).

%% body_pred(P/A)

is_list([]).
is_list([_|_]).

increment(A,B):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    succ(A,B).

decrement(A,B):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    succ(B,A).

my_length(A,B):-
    (nonvar(A) -> is_list(A); true),
    (nonvar(B) -> \+is_list(B); true),
    length(A,B).

cons(A,B,C):-
    append([A],B,C).
comps([H|T],H,T).

tail([_|T],T).
head([H|_],H).
sum(A,B,C):-
    C is A+B.
empty([]).

element([X|_],X):-!.
element([_|T],X):-
    element(T,X).

empty_in([]).
empty_out([]).

zero(0).
one(1).

gt(A,B):-
    nonvar(A),
    nonvar(B),
    \+is_list(A),
    \+is_list(B),
    A > B.

geq(A,B):-
    nonvar(A),
    nonvar(B),
    \+is_list(A),
    \+is_list(B),
    A >= B.

even(A):-
    nonvar(A),
    \+ is_list(A),
    0 is A mod 2.

odd(A):-
    nonvar(A),
    \+ is_list(A),
    1 is A mod 2.


%% partition(Pivot,L1,Left,Right)


add_count(f(A),N-f(A)):-
    length(A,N).
add_count(f(A,B),N-f(A,B)):-
    length(A,N).
remove_k(_-V,V).

sort_examples(L1,L2):-
  maplist(add_count,L1,L3),
  keysort(L3,L4),
  maplist(remove_k,L4,L2).

run:-
    findall(A, pos(A), Pos0),
    findall(A, neg(A), Neg0),
    sort_examples(Pos0, Pos),
    sort_examples(Neg0, Neg),
    learn(Pos, Neg).



%% run:-
%%     findall(A, pos(A), Pos),
%%     findall(A, neg(A), Neg),
%%     learn(Pos, Neg).

test:-
    forall(pos(A),test_pos(A)),
    forall(neg(A),test_neg(A)),
    halt.

target(P/A):-
    pos(Atom),!,
    functor(Atom,P,A).

target_exists:-
    target(P/A),
    current_predicate(P/A).

test_pos(A):-
    target_exists,
    call(A),!,
    writeln('acc,1').
test_pos(_):-
    writeln('acc,0').

test_neg(A):-
    target_exists,
    call(A),!,
    writeln('acc,0').
test_neg(_):-
    writeln('acc,1').

:-end_bg.
:-begin_in_pos.
f([62, 8, 11, 16, 95, 5, 15, 82, 93, 46, 32, 10, 92, 16, 20, 51, 56, 87, 52, 88],[62, 8, 11, 16, 95, 5, 15, 82, 93, 46, 32, 10, 92, 16, 20, 51, 56, 87, 52]).
f([21, 95, 38, 94, 68, 23, 66, 57, 94, 51, 65, 49, 34, 99, 44, 12, 6, 9, 33, 98, 42, 90, 41],[21, 95, 38, 94, 68, 23, 66, 57, 94, 51, 65, 49, 34, 99, 44, 12, 6, 9, 33, 98, 42, 90]).
f([81, 63, 3, 38, 25, 67, 10, 92, 87, 34, 19, 14, 97, 12, 29, 41, 10, 97, 20, 23, 46, 29, 6, 26, 99, 99, 90, 47, 75, 14, 67, 99, 36, 55, 78, 87, 80, 82, 100, 12, 90, 86, 45, 34, 52, 53, 90, 74, 57, 48, 84],[81, 63, 3, 38, 25, 67, 10, 92, 87, 34, 19, 14, 97, 12, 29, 41, 10, 97, 20, 23, 46, 29, 6, 26, 99, 99, 90, 47, 75, 14, 67, 99, 36, 55, 78, 87, 80, 82, 100, 12, 90, 86, 45, 34, 52, 53, 90, 74, 57, 48]).
f([88, 9, 87, 4, 38, 32, 41],[88, 9, 87, 4, 38, 32]).
f([63, 94, 32, 16, 33, 16, 72, 6, 23, 60, 30, 25, 22, 4, 67, 54, 86, 68, 101],[63, 94, 32, 16, 33, 16, 72, 6, 23, 60, 30, 25, 22, 4, 67, 54, 86, 68]).
f([18, 30, 66],[18, 30]).
f([33, 74, 87, 5, 81, 97, 70, 78, 33, 62, 53, 39, 57, 34, 18, 92, 73, 63, 22, 24, 17, 68, 62, 22, 10, 39, 11, 87, 59, 65, 82, 37, 44, 53, 52, 56, 16, 64, 19, 26, 90, 57, 21, 56, 70, 71, 52, 100],[33, 74, 87, 5, 81, 97, 70, 78, 33, 62, 53, 39, 57, 34, 18, 92, 73, 63, 22, 24, 17, 68, 62, 22, 10, 39, 11, 87, 59, 65, 82, 37, 44, 53, 52, 56, 16, 64, 19, 26, 90, 57, 21, 56, 70, 71, 52]).
f([71, 20, 41, 13, 21, 33, 95, 89, 46, 55, 49, 22, 67, 86],[71, 20, 41, 13, 21, 33, 95, 89, 46, 55, 49, 22, 67]).
f([11, 15, 53, 87, 38, 96, 16, 22, 69, 73, 28, 97, 21, 68, 63, 18, 59, 97, 61, 44, 36, 49, 74, 1, 43, 45, 46, 58, 85, 58, 17, 74, 96, 4, 58, 25],[11, 15, 53, 87, 38, 96, 16, 22, 69, 73, 28, 97, 21, 68, 63, 18, 59, 97, 61, 44, 36, 49, 74, 1, 43, 45, 46, 58, 85, 58, 17, 74, 96, 4, 58]).
f([82, 65, 78, 94, 71, 11, 5, 25, 61, 22, 55, 71],[82, 65, 78, 94, 71, 11, 5, 25, 61, 22, 55]).
:-end_in_pos.
:-begin_in_neg.
f([62, 68, 37, 67, 42, 14, 86, 66, 30, 40, 16, 41, 51, 90, 54, 32, 99, 10, 76, 28, 85, 41, 74, 68, 76, 70, 14, 79, 61, 77, 66, 92, 26, 44, 32, 46, 48, 45, 37, 55, 59, 10, 84, 24],[62, 68, 37, 67, 42, 14, 86, 66, 30, 40, 16, 41, 51, 90, 54, 32, 99, 10, 76, 28, 85, 41, 74, 68, 76, 70, 14, 79, 61, 77, 66, 92, 26, 44, 32, 46, 48, 45, 37, 55, 59, 10, 84, 24]).
f([66, 92, 47, 63, 19, 57, 67, 48, 30, 35, 80, 85, 33, 36],[66, 92, 47, 63, 19, 57, 67, 48, 30, 35, 80, 85, 33, 36]).
f([72, 64, 68, 84, 51, 27, 13, 88, 74, 46, 94, 82, 74, 8, 32, 24, 48, 56, 18, 17, 30, 65, 53, 53, 35, 41, 97, 33, 51, 32, 46, 13, 50, 7, 25, 8, 18, 85, 42, 47, 56, 2, 5, 76, 43, 62, 42, 101, 81, 53, 76],[72, 64, 68, 84, 51, 27, 13, 88, 74, 46, 94, 82, 74, 8, 32, 24, 48, 56, 18, 17, 30, 65, 53, 53, 35, 41, 97, 33, 51, 32, 46, 13, 50, 7, 25, 8, 18, 85, 42, 47, 56, 2, 5, 76, 43, 62, 42, 101, 81, 53, 76]).
f([58, 28, 45, 82, 93, 88, 17, 17, 15, 93, 3, 100, 79, 26, 64, 89, 45, 50, 99, 90, 71, 27, 59, 15, 5, 81],[58, 28, 45, 82, 93, 88, 17, 17, 15, 93, 3, 100, 79, 26, 64, 89, 45, 50, 99, 90, 71, 27, 59, 15, 5, 81]).
f([19, 38, 34, 1, 36, 77, 61, 71, 100, 10, 99, 48, 34, 22, 46, 28, 80, 10, 79, 60, 7, 37, 65, 37, 81, 1, 43, 24, 97, 31, 15, 17, 91, 43, 74, 62, 51, 46, 25],[19, 38, 34, 1, 36, 77, 61, 71, 100, 10, 99, 48, 34, 22, 46, 28, 80, 10, 79, 60, 7, 37, 65, 37, 81, 1, 43, 24, 97, 31, 15, 17, 91, 43, 74, 62, 51, 46, 25]).
f([1, 26, 31, 79, 13, 2, 59],[1, 26, 31, 79, 13, 2, 59]).
f([25, 28, 38, 16, 16, 34, 4, 77, 69, 53, 84, 13, 100, 1, 85, 49, 47, 25, 95, 51, 62, 15, 7, 18, 24, 14, 42, 8, 12, 91, 25, 52, 78],[25, 28, 38, 16, 16, 34, 4, 77, 69, 53, 84, 13, 100, 1, 85, 49, 47, 25, 95, 51, 62, 15, 7, 18, 24, 14, 42, 8, 12, 91, 25, 52, 78]).
f([28, 36, 74, 51, 69, 99, 29, 53, 94, 10, 86, 40, 73, 31, 24, 79, 89, 52, 87, 14, 94, 69, 5, 30, 33, 30, 14, 89, 17, 74],[28, 36, 74, 51, 69, 99, 29, 53, 94, 10, 86, 40, 73, 31, 24, 79, 89, 52, 87, 14, 94, 69, 5, 30, 33, 30, 14, 89, 17, 74]).
f([91, 7, 57, 17, 57, 75, 2, 44, 93, 58, 46, 49, 46, 48, 17, 29, 1, 17, 77, 14, 1, 45, 47, 35, 35, 93, 60, 45, 70, 82, 33, 32, 83, 43, 76, 97, 29, 83, 67, 16, 20, 53, 52, 71, 64],[91, 7, 57, 17, 57, 75, 2, 44, 93, 58, 46, 49, 46, 48, 17, 29, 1, 17, 77, 14, 1, 45, 47, 35, 35, 93, 60, 45, 70, 82, 33, 32, 83, 43, 76, 97, 29, 83, 67, 16, 20, 53, 52, 71, 64]).
f([20, 79, 54, 65, 82, 31, 26, 22, 65, 90, 15, 40, 1, 63, 43, 52, 22, 95, 46, 18, 6, 1, 70, 45, 4, 74, 27, 98, 45, 48, 74, 46, 29, 44, 23, 49, 67, 41, 13, 6, 85, 43, 28, 101, 94, 98, 69, 83, 101],[20, 79, 54, 65, 82, 31, 26, 22, 65, 90, 15, 40, 1, 63, 43, 52, 22, 95, 46, 18, 6, 1, 70, 45, 4, 74, 27, 98, 45, 48, 74, 46, 29, 44, 23, 49, 67, 41, 13, 6, 85, 43, 28, 101, 94, 98, 69, 83, 101]).
:-end_in_neg.
