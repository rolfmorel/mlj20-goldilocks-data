#!/usr/bin/env python

import datetime
import os
import shutil
import sys
import contextlib
import time
import threading
import subprocess
import json

try:
    import thread
except ImportError:
    import _thread as thread

from multiprocessing import Pool
from glob import glob
from itertools import product
from functools import reduce
from collections import defaultdict
from statistics import mean, stdev

POOL_SIZE = 3
#POOL_SIZE = 1

TIMEOUT = 120

POS_EXAMPLES = 2 # NB: ignored for now
NEG_EXAMPLES = 0 # NB: ignored for now
CLAUSES = 1
TRIALS = 2

MIN_SIZE = 0
MAX_SIZE = 10

goldilocks = None
sys.path.append("../../../systems/goldilocks/")
import chimera.main as goldilocks
from chimera.util import working_directory

def main(args):
    trial, size = args
    task_name = f"size_{size}-trial_{trial}"
    with working_directory("./" + task_name), \
         open("result.txt", "w") as results, \
         open("problem.pl", 'w') as problem:
        problem.write("#maxv(1).\n\n")
        problem.write(f"size_({size}).\n\n")

        primes= [2,3,5,7,11,13,17,19,23,29]
        primes= [2,3,5,7]
        product = reduce(lambda x, y: x*y, primes)

        exs = f"#pos(p1, {{f({product})}}, {{}}).\n"
        exs += '\n'.join(f"#neg(n{p}, {{f({product//p})}}, {{}})." for p in primes)

        bk_modes = "#modeh(1,f(var(num)), (positive)).\n"
        bk_modes += '\n'.join(f"#modeb(1,div{p}(var(num)), (positive))." for p in primes) + '\n'
        bk_modes += '\n'.join(f"#modeb(1,bottom{n}(var(num)), (positive))." for n in range(1, size + 1))
        bk_preds = '\n'.join(f"div{p}(A) :- A \\ {p} = 0, num(A)." for p in primes) + '\n'
        bk_preds += '\n'.join(f"bottom{n}(A) :- num(A), 0 = 1." for n in range(1, size + 1)) + '\n'
        bk_preds += '\n'.join(f"num({n})." for n in range(0, product+1))

        problem.write(exs + "\n\n" + bk_modes + "\n\n" + bk_preds + "\n\n")
        problem.flush()

        before = time.time()
        try:
            cp = subprocess.run(['ilasp', '--clingo5', '--version=2', f'-ml={len(primes)}', 'problem.pl'],
                                stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                                timeout=TIMEOUT)
            print(cp.stdout)
            print(cp.stderr)
            print(cp.returncode)
            program = cp.stdout.decode('utf-8')
        except subprocess.TimeoutExpired:
            program = False  # NB: signifies synthesizer did not return
        after = time.time()

        result = {'size': size,
                  'trial': trial,
                  'time': after - before,
                  'program': program}

        print(json.dumps(result, indent=2), file=results)
        print(json.dumps(result))

        return result


if __name__ == "__main__":
    DATETIME = str(datetime.datetime.now())
    with working_directory("./" + DATETIME):
        with Pool(POOL_SIZE) as pool:
            trials = range(1, TRIALS + 1)
            sizes = range(MIN_SIZE, MAX_SIZE + 1)
            process_args = product(trials, sizes)
            results = pool.map(main, process_args)
            collected_results = defaultdict(list)
            for res in results:
                collected_results[res['size']] += [res['time']]

            print(collected_results)
            with open("results.txt", 'w') as results,\
                 open("results.table", 'w') as table:
                table.write("size time error\n")
                mean_times = defaultdict(dict)
                for i in sizes:
                    times = collected_results[i]
                    mean_times[i] = {'mean': mean(times), 'stdev': stdev(times)}
                    table.write(f"{i} {mean(times)} {stdev(times)}\n")
                results.write(json.dumps(mean_times, indent=2))


            
