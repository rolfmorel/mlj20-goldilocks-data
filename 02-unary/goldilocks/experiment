#!/usr/bin/env python

import datetime
import os
import shutil
import sys
import contextlib
import time
import threading
import json

try:
    import thread
except ImportError:
    import _thread as thread

from multiprocessing import Pool
from glob import glob
from itertools import product
from collections import defaultdict
from statistics import mean, stdev

POOL_SIZE = 3
#POOL_SIZE = 1

TIMEOUT = 120

POS_EXAMPLES = 2
NEG_EXAMPLES = 0 # NB: ignored for now
CLAUSES = 1
TRIALS = 1

MIN_SIZE = 11
MAX_SIZE = 11

goldilocks = None
sys.path.append("../../../systems/goldilocks/")
import chimera.main as goldilocks
from chimera.util import working_directory

def main(args):
    trial, size = args
    task_name = f"size_{size}-trial_{trial}"
    with working_directory("./" + task_name), \
         open("parameters.pl", "w") as params, \
         open("examples.pl", "w") as examples, \
         open("result.txt", "w") as results:
        max_vars = size
        params.write(f"""
max_vars({max_vars+1}).
max_body({MAX_SIZE}).
max_clauses({CLAUSES}).
"""
)
        params.flush()

        examples.write(f"""\
pos(f(30030)).
neg(f(15015)).
neg(f(10010)).
neg(f(6006)).
neg(f(4290)).
neg(f(2730)).
neg(f(2310)).

%pos(f(510510)).
%neg(f(255255)).
%neg(f(170170)).
%neg(f(102102)).
%neg(f(72930)).
%neg(f(46410)).
%neg(f(39270)).
%neg(f(30030)).


%pos(f(6469693230)).
%neg(f(3234846615)).
%neg(f(2156564410)).
%neg(f(1293938646)).
%neg(f(924241890)).
%neg(f(588153930)).
%neg(f(497668710)).
%neg(f(380570190)).
%neg(f(340510170)).
%neg(f(281291010)).
%neg(f(223092870)).

%pos(f(2310)).
%neg(f(210)).
%neg(f(330)).
%neg(f(462)).
%neg(f(770)).
%neg(f(1155)).
"""
)
        examples.flush()

        for file_ in glob("../../*.asp.pl") + glob("../../*.prolog.pl"):
            shutil.copyfile(file_, os.path.basename(file_))

        task_path = os.path.dirname(os.path.realpath(__file__)) + f"/{DATETIME}/{task_name}"

        before = time.time()

        timer = threading.Timer(TIMEOUT, lambda: thread.interrupt_main())
        timer.start()
        try:
            program, time_breakdown = goldilocks.main(os.getcwd(), {'constrain_specializations': True})
        except KeyboardInterrupt:
            program = False  # NB: signifies synthesizer did not return
            time_breakdown = None
        finally:
            timer.cancel()

        after = time.time()

        result = {'size': size,
                  'trial': trial,
                  'time': after - before,
                  'time_breakdown': time_breakdown,
                  'program': program}

        print(json.dumps(result, indent=2), file=results)
        print(json.dumps(result))

        return result

if __name__ == "__main__":
    DATETIME = str(datetime.datetime.now())
    with working_directory("./" + DATETIME):
        with Pool(POOL_SIZE) as pool:
            trials = range(1, TRIALS + 1)
            sizes = range(MIN_SIZE, MAX_SIZE + 1)
            process_args = product(trials, sizes)
            results = pool.map(main, process_args)
            collected_results = defaultdict(list)
            for res in results:
                collected_results[res['size']] += [res['time']]

            with open("results.txt", 'w') as results:
                mean_times = defaultdict(lambda: defaultdict(dict))
                mean_times['trials'] = len(trials)
                for i in sizes:
                    times = collected_results[i]
                    mean_times[i] = {'mean': mean(times),
                                     'stdev': 0 if len(trials) == 1 else stdev(times)}
                results.write(json.dumps(mean_times, indent=2))


            
