#!/usr/bin/env python

import datetime
import os
import shutil
import sys
import contextlib
import time
import threading
import subprocess
import json

try:
    import thread
except ImportError:
    import _thread as thread

from multiprocessing import Pool
from glob import glob
from itertools import product
from collections import defaultdict
from statistics import mean, stdev

from asp_wrapper import call_asp


POOL_SIZE = 3
#POOL_SIZE = 1

TIMEOUT = 120

TRIALS = 2

MIN_SIZE = 1
MAX_SIZE = 10

goldilocks = None
sys.path.append("../../../systems/goldilocks/")
from chimera.util import working_directory

def main(args):
    trial, size = args
    task_name = f"size_{size}-trial_{trial}"
    with working_directory("./" + task_name), \
         open("parameters.pl", "w") as params, \
         open("train.pl", "w") as examples, \
         open("result.txt", "w") as results:
        params.write(f"""\
max_pos_x({MAX_SIZE}).
max_pos_y({MAX_SIZE}).
"""
)
        params.flush()

        examples.write(f"""\
pos_ex(f,(0,0,1,0,0),({size},0,1,0,0)).
"""
)
        examples.flush()

        before = time.time()

        program = call_asp(["../../forward_chained.hex", "parameters.pl", "train.pl"], size + 1, TIMEOUT, results)

        after = time.time()

        result = {'size': size,
                  'trial': trial,
                  'time': after - before,
                  'program': program}

        print(json.dumps(result, indent=2), file=results)
        print(json.dumps(result, indent=2))

        return result

if __name__ == "__main__":
    DATETIME = str(datetime.datetime.now())
    with working_directory("./" + DATETIME):
        with Pool(POOL_SIZE) as pool:
            trials = range(1, TRIALS+1)
            sizes = range(MIN_SIZE, MAX_SIZE + 1)
            process_args = product(trials, sizes)
            #process_args = [(1,10)]
            results = pool.map(main, process_args)
            collected_results = defaultdict(list)
            for res in results:
                collected_results[res['size']] += [res['time']]

            with open("results.txt", 'w') as results:
                mean_times = defaultdict(dict)
                mean_times['trials'] = len(trials)
                for i in sizes:
                    times = collected_results[i]
                    mean_times[i] = {'mean': mean(times), 
                                     'stdev': 0 if len(times) == 0 else stdev(times)}
                results.write(json.dumps(mean_times, indent=2))


            
